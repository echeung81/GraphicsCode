// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

 Shader "Custom/GrabPass Disortion" {

	Properties
	{
		_MainTex ("Sprite Texture", 2D) = "white" {}
		_Color ("Tint", Color) = (1,1,1,1)
		[MaterialToggle] PixelSnap ("Pixel snap", Float) = 0
		_Intensity ("Intensity", Range(0, 50)) = 0
		_IntensityY ("IntensityY", Range(0, 50)) = 0
		_YAmp("YAmp", Range(0, 50)) = 0
		_XAmp("XAmp", Range(0, 50)) = 0
		_Speed("Speed", Range(0,50)) = 0


		[MaterialToggle] _isToggled("isToggle", Float) = 0
	}

	SubShader
	{
		Tags
		{ 
			"Queue"="Transparent" 
			"IgnoreProjector"="True" 
			"RenderType"="Transparent" 
			"PreviewType"="Plane"
			"CanUseSpriteAtlas"="True"
		}

		Cull Off
		Lighting Off
		ZWrite On
		Blend One OneMinusSrcAlpha

		Pass
		{
		CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#pragma target 2.0
			#pragma multi_compile _ PIXELSNAP_ON
			#pragma multi_compile _ ETC1_EXTERNAL_ALPHA
			#include "UnityCG.cginc"
			
			struct appdata_t
			{
				float4 vertex   : POSITION;
				float4 color    : COLOR;
				float2 texcoord : TEXCOORD0;
				//UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f
			{
				float4 vertex   : SV_POSITION;
				fixed4 color    : COLOR;
				float2 texcoord  : TEXCOORD0;
				//UNITY_VERTEX_OUTPUT_STEREO
			};
			
			fixed4 _Color;
			half _Intensity;
			half _IntensityY;
			half _YAmp;
			half _XAmp;
			half _Speed;


			v2f vert(appdata_t IN)
			{
				v2f OUT;
				//UNITY_SETUP_INSTANCE_ID(IN);
				//UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);
				OUT.vertex = UnityObjectToClipPos(IN.vertex);
				OUT.texcoord = IN.texcoord;
				OUT.color = IN.color * _Color;
				#ifdef PIXELSNAP_ON
				OUT.vertex = UnityPixelSnap (OUT.vertex);
				#endif

				return OUT;
			}

			sampler2D _MainTex;
			sampler2D _AlphaTex;

			fixed4 SampleSpriteTexture (float2 uv)
			{
				fixed4 color = tex2D (_MainTex, uv);

#if ETC1_EXTERNAL_ALPHA
				// get the color from an external texture (usecase: Alpha support for ETC1 on android)
				color.a = tex2D (_AlphaTex, uv).r;
#endif //ETC1_EXTERNAL_ALPHA

				return color;
			}

			fixed4 frag(v2f IN) : SV_Target
			{


			float time = (_Time.y / 1000) * 2 * 3.1416;
			#ifdef PIXELSNAP_ON
				float intermediateIntensity = -4 * (IN.texcoord.x * IN.texcoord.x) + 4 * (IN.texcoord.x); // IN.texcoord.x * IN.texcoord.x;
			#else 
				float intermediateIntensity =  -4 * (IN.texcoord.x * IN.texcoord.x) + 4 * (IN.texcoord.x); //1 - (IN.texcoord.x * IN.texcoord.x); 
			#endif

			#ifdef PIXELSNAP_ON
				float intermediateIntensityY = 1 - (IN.texcoord. x* IN.texcoord.x * IN.texcoord. x* IN.texcoord.x);
			#else 
				float intermediateIntensityY = (IN.texcoord.x * IN.texcoord.x * IN.texcoord. x* IN.texcoord.x);
			#endif

				float yIntensity = (IN.texcoord.y * IN.texcoord.y); 

				float origX = IN.texcoord.x;

				float sinF = sin( (_Time.y + IN.texcoord.y) * _Speed) ;

				float sinFX = sin( (_Time.y + IN.texcoord.y + IN.texcoord.x) * 10) ;


				IN.texcoord.x += ((_XAmp * sinF) / 20) * intermediateIntensity;

				IN.texcoord.y += ((_YAmp * sinF) / 20) * intermediateIntensity;   //5 * (sin((_Time.y + origX) * _IntensityY) / 20) *  intermediateIntensity;

				IN.texcoord.y += sin(_Time.y) / 100;


				fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;
				c.rgb *= c.a;
				return c;
			}
		ENDCG
		}
	}

	 SubShader {
        // here goes a simpler version of the SubShader
        // above than can run on older graphics cards
        Tags
		{ 
			"Queue"="Transparent" 
			"IgnoreProjector"="True" 
			"RenderType"="Transparent" 
			"PreviewType"="Plane"
			"CanUseSpriteAtlas"="True"
		}

		Cull Off
		Lighting Off
		ZWrite On
		Blend One OneMinusSrcAlpha

		Pass
		{
		CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#include "UnityCG.cginc"
			
			struct appdata_t
			{
				float4 vertex   : POSITION;
				float4 color    : COLOR;
				float2 texcoord : TEXCOORD0;
			};

			struct v2f
			{
				float4 vertex   : SV_POSITION;
				fixed4 color    : COLOR;
				float2 texcoord  : TEXCOORD0;
			};
			
			fixed4 _Color;
			half _Intensity;
			half _IntensityY;
			half _YAmp;
			half _XAmp;
			half _Speed;


			v2f vert(appdata_t IN)
			{
				v2f OUT;
				OUT.vertex = UnityObjectToClipPos(IN.vertex);
				OUT.texcoord = IN.texcoord;
				OUT.color = IN.color * _Color;

				return OUT;
			}

			sampler2D _MainTex;
			sampler2D _AlphaTex;

			fixed4 frag(v2f IN) : SV_Target
			{
				fixed4 c = tex2D (_MainTex, IN.texcoord) * IN.color;
				c.rgb *= c.a;
				return c;
			}
		ENDCG
		}



    }
}


